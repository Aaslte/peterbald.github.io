---
layout: post
title: "WebRTC 技术栈索引"
subtitle: ''
description: "WebRTC, 音视频开发"
author: "RandomJ"
header-img: "img/background.jpeg"
tags:
  - WebRTC
---


#### 一、概述
最近公司的项目用到了 WebRTC 技术栈，看过一些 WebRTC 的源码和文章，本文就做为最近的读书笔记和实践总结。

#### 二、什么是 WebRTC

`WebRTC` 实时通信技术 (WebRTC：Web Real-Time Communication) 是一个基于标准化的行业性项目，该标准是由 `W3C` 和 `IETF` 联合制定，目的是使 `Web` 浏览器可以方便的使用实时通信功能。作为一个高质量的开源音视频引擎，也帮助了很多开发者和团队在移动应用上搭建通信功能。

#### 三、WebRTC 如何连接

##### 3.1 获取本地媒体
在浏览器端最常见的方式是通过 `getUserMedia()` 获取本地单个 `MediaStream`

##### 3.2 建立对等连接
`WebRTC` 对等连接并不是类似于 `TCP` 意义上的连接，是一组路径建立进程(ICE) 和可确定应建立哪些媒体和数据路径的协商器(SDP)。
通过 `RTCPeerConnection` 建立两个对等端的连接。`RTCPeerConnection` 构造函数方法的参数是一个配置对象，包含实现`NAT`和防火墙设备 `ICE` 方式打洞所需要的信息。

##### 3.2.1 建连过程
- A 决定和 B 通信，A 将会话描述对象(offer提议) 发送到 Web 服务器
- Web 服务器将 A 的会话描述对象发送给 B
- B 将会话描述对象(answer, 应答) 发送到 Web 服务器
- Web 服务器将 B 的会话描述对象发送给 A
- A 和 B 开始打洞，确定访问对方的最佳方式
- 完成打洞后，A 和 B 协商安全通信的密钥
- A 和 B 交换语音、视频或者数据

##### 3.2.2 信令
在 `WebRTC` 中，信令主要用于协商媒体功能和设置，但是由于没有实现标准化，所以这部由开发人员自行选择

##### 3.2.3 提议/应答协商
在 `WebRTC` 中，双方建立媒体会话之前，必须在二者之间进行协商，用于确定双方在会话中使用哪些通用功能特性。包括但不限于以下这些功能：

- 发送和接收的媒体类型，音频、视频或者数据通道
- 要使用的一个或多个编解码器以及具体的参数
- 用于媒体加密和身份验证的密钥信息

`WebRTC` 的会话由会话描述协议`(Session Description Protocol, SDP)` 描述，是由 `IETF` 指定的标准化协议，广泛应用在 `Internet` 通信的设备和服务中。具体使用的是 `RTCSessionDescription` 对象。

##### 3.2.4 对等连接建立

##### 3.2.4.1 网络地址转换

##### 3.2.4.1.1 什么是网络地址转换
网络地址转换`(Network Address Translation，NAT)` 是一种 `IP` 数据包通过路由或者防火墙重写来源 `IP` 地址或者目的 `IP` 地址的技术，`NAT` 负责维护内部（私有）`IP` 地址和端口号和外部（公有）`IP` 地址和端口号之间的映射表。除了维护映射表，还负责维护过滤器规则，规定公共 `Internet` 中的哪些 `IP` 地址和端口号可以使用这些已创建的映射。

##### 3.2.4.1.2 为什么需要网络地址转换
1990年代中期，`NAT` 是作为一种解决 `IPv4` 地址短缺以避免保留 `IP` 地址困难的方案而流行起来的。`NAT` 在很多国家都有很广泛的使用。所以 `NAT` 就成了家庭和小型办公室网络连接路由器的一个标准特征，因为对他们来说，申请独立的 `IP` 地址的代价要高于所带来的效益。

在一个典型的配置中，一个本地网络使用一个专有网络的指定子网（比如 `192.168.x.x` 或 `10.x.x.x`）和连在这个网络上的一个路由器。这个路由器占有这个网络地址空间的一个专有地址（比如`192.168.0.1`），同时它还通过一个或多个因特网服务提供商(`ISP`)提供的公有的 `IP` 地址（叫做“过载”`NAT`）连接到因特网上。当信息由本地网络向因特网传递时，源地址被立即从专有地址转换为公用地址。由路由器跟踪每个连接上的基本数据，主要是目的地址和端口。当有响应返回路由器时，它通过输出阶段记录的连接跟踪数据来决定该转发给内部网的哪个主机。如果有多个公用地址可用，当数据包返回时，`TCP` 或 `UDP` 客户机的端口号可以用来分解数据包。

流行在网络上的一种看法认为，`IPv6` 的广泛采用将使得 `NAT` 不再需要，因为 `NAT` 只是一个处理 `IPv4` 的地址空间不足的方法。

##### 3.2.4.1.3 网络地址转换有什么缺点
在一个具有 `NAT` 功能的路由器下的主机并没有创建真正的 `IP` 地址，并且不能参与一些因特网协议。一些需要初始化从外部网络创建的 `TCP` 连接和无状态协议（比如 `UDP`）无法实现。除非 `NAT` 路由器管理者预先设置了规则，否则送来的数据包将不能到达正确的目的地址。`NAT` 也会使安全协议变的复杂，比如 `IPsec`。端对端连接是被 `IAB` 委员会（`Internet Architecture Board`）支持的核心因特网协议之一，因此有些人据此认为 `NAT` 是对公用因特网的一个破坏。一些因特网服务提供商只向他们的客户提供本地 `IP` 地址，所以他们必须通过 `NAT` 来访问 `ISP` 网络以外的服务。

`NAT` 除了带来方便和代价之外，对全双工连接支持的缺少在一些情况下可以看作是一个有好处的特征而不是一个限制。在一定程度上，`NAT`依赖于本地网络上的一台机器来初始化和路由器另一边的主机的任何连接，它可以阻止外部网络上的主机的恶意活动。这样就可以阻止网络蠕虫病毒来提高本地系统的可靠性，阻挡恶意浏览来提高本地系统的私密性。很多具有 `NAT` 功能的防火墙都是使用这种功能来提供核心保护的。另外，它也为 `UDP` 的跨局域网的传输提供了方便。

##### 3.2.4.2 打洞

##### 3.2.4.2.1 什么是打洞
![](/img/P2PInNAT.png)
通常情况下，我们需要在内网主机，例如`终端 A` 主动发起连接，数据包经过`NAT`地址转换之后送给公网上的服务器，例如上图中的 `Server S`，连接建立以后可以双向传送数据，`NAT` 设备允许私网内主机主动公网内发送数据，但却禁止反方向的主动传递，但是在类似于 `P2P` 软件、网络会议和视频传输等场景下需要双方互联。
假如现在我们需要从上图的`终端 A` 访问到`终端 B`，`终端 A` 给 `终端 B` 发送数据经过 `NAT-B`，`NAT-B` 打开数据包发现来源 `IP` 为`100.10.10.10` ，`NAT-B` 发现自己内部设备并没有设备请求过这个 `IP`，于是 `NAT-B` 认为这个数据包是“不请自来”的。对待这种不请自来的数据包，大多数 `NAT` 设备出于安全性的考虑，都选择丢包，所以`终端 B` 并没有收到这个数据包。`终端 B` 访问`终端 A` 也是一样的情况。所以，`终端 A` 和 `终端 B` 需要第三方才能完成互相访问，这一过程就称之为打洞。

##### 3.2.4.2.2 如何实现打洞
- `终端 A` 给 `Server S` 发送一个请求。`Server S` 记录了 `终端A` 的公网 `IP` 和端口号(`100.10.10.10:9527`)
- `终端 B` 给 `Server S` 发送一个请求。`Server S` 记录了 `终端B` 的公网 `IP` 和端口号(`200.20.20.20:9528`)
- `Server S` 通知`终端 B` 给`终端 A` 的地址发送消息
- `终端 B` 给`终端 A` 发送消息，发送完成后通知 `Server S`，这条消息会被 `NAT-A` 拦截下来，但是 `NAT-B` 会记录访问了`终端 A` 的地址 `100.10.10.10:9527`，以后来自这个地址的信息不会被拦截
- `Server S` 收到`终端 B` 的消息，给`终端 A` 发送消息：“`终端 B` 的地址是 `200.20.20.20:9528`，你可以给它发送消息了“
- `终端 A` 收到 `Server S` 的消息，可以使用 `100.10.10.10:9527` 这个 `IP` 和`终端 B` 通信了，至此打洞完成了。

##### 3.2.4.3 WebRTC 中的 NAT 和防火墙穿透
`WebRTC` 采用端到端媒体流，语音、视频和数据连接都直接在两个浏览器之间。由于 `NAT` 和防火墙，需要特殊的协议和过程才能实现，通常采用穿透技术来实现端到端的直接连接。

> 通常采用穿透技术通常需要满足以下条件

- 两端同时发送穿透数据包(普通的 `IP` 数据包)，主要目的确认是否可以通过 `NAT` 连接特定的目标地址
- 两个浏览器需要尽可能多地获知可用于访问对方的潜在 `IP` 地址。包括私有 `IP` 地址( `NAT` 内部)、公有 `IP` 地址(`NAT` 外部) 和中继地址
- 需要一个媒体中继(具有公共 `IP` 地址，两个浏览器都可以访问的)，用作万不得已时候的访问途径
- 必须采用端到端流，`UDP` 通信所展现出来的行为必须和 `TCP` 连接类似

##### 3.2.4.3.1 交互式连接建立(Interactive Connectivity Establishment，ICE)

> 基于以上穿透技术的条件，`WebRTC` 采用的是使用 `ICE` 标准穿透协议来实现穿透技术，利用 `STUN` 和 `TURN` 服务器帮助端点建立连接。具体的实现如下 

- 穿透数据包的接收用普通的 `Web` 服务器就可以
- 获取对方的潜在 `IP` 可以使用 `NAT` 会话遍历工具(`Session Traversal Utilities for NAT，STUN`)服务器
- 媒体中继可以使用中继型 `NAT` 遍历(`Traversal Using Relay around NAT, TURN`) 服务器。媒体中继地址是一个公共 `IP` 地址，用于转发从设置中继地址的浏览器收到的数据包，或者将收到的数据包转发给该浏览器。此地址随后会被添加到候选项列表中。
- 浏览器接收和发送媒体使用同一个 `UDP` 端口，这样可以使 `NAT` 将 `UDP` 上两个单向的 `RTP` 会话识别成为一个双向`RTP` 会话

##### 3.2.4.3.2 STUN 服务器
有一种用于帮助遍历 `NAT` 的服务器，称为 `NAT` 会话遍历实用工具(`Session Traversal Utilities for NAT，STUN`)服务器。
- 浏览器向 `STUN` 服务器发送 `STUN` 数据包，获取其公共 `IP` 地址，即 `NAT` 后的地址
- 与另一端浏览器共享公共 `IP` 地址，成为”候选“地址

##### 3.2.4.3.2 TURN 服务器

> 还有一种用于帮助遍历 `NAT` 的服务器，名为使用中继型 `NAT` 遍历(`Traversal Using Relay around NAT, TURN`)服务器。

- 浏览器通过查询 `TURN` 服务器来获取媒体中继地址，该地址是一个公共 `IP` 地址，用于转发从浏览器收到的数据包，或者将该数据包转发给浏览器。
- 如果两端浏览器单纯因为 `NAT` 类型而无法建立直接的对等媒体会话，使用中继地址

虽然 `TURN` 服务器显示为独立的服务器，实际上 `TURN` 服务器只是增加了中继功能的 `STUN` 服务器。所有的 `TURN` 服务器都同时具有 `STUN` 功能，但并非每台 `STUN` 服务器都具有 `TURN` 功能。

##### 3.2.4.3.3 ICE 具体的交互步骤如下

> 假设有位于`NAT`后的`代理 A`和`代理 B`进行`ICE`连接

- `代理 A` 收集候选传输地址(向 `STUN` 服务器发送请求，获取服务器反射地址)
- `代理 A` 向 `代理 B` 通过信令方式发起 `SDP` 提议(包含了上一步收集的地址候选项信息)
- `代理 B` 收集候选传输地址(向 `STUN` 服务器发送请求，获取服务器反射地址)
- `代理 B` 向 `代理 A` 通过信令方式发送 `SDP` 应答(包含了上一步收集的地址候选项信息)
- `代理 A` 向 `代理 B` 发送 `STUN` 检查(参照上面 `3.2.4.2.2` 给对端的公有地址发送数据包，实现打洞)
- `代理 B` 向 `代理 A` 发送 `STUN` 检查(参照上面 `3.2.4.2.2` 给对端的公有地址发送数据包，实现打洞)
- 选择选定的候选项对并启动媒体(`STUN` 检查之后标记可用候选项对，由施控`ICE`选择具体哪个对)
-  `代理 A`  和  `代理 B` 发送常连接(`KeepAlive`)：为确保`NAT`映射和过滤规则不在媒体会话期间超时，`ICE`会不断通过使用中的候选项对发送连接检查，每隔 15秒发送一次。可以保证，即使媒体暂停或者因其他情况而没有发送，也有数据包得到持续发送。如果这一端的`ICE`收到媒体响应，则表明可以继续发送媒体。如果没有，则停止媒体流。任何一端检测到使用中的`IP`地址发生变化，都重新启动`ICE`。

> 候选地址，是用于接收媒体以建立对等连接的`IP`地址和端口。许多情况下，这些地址必须在呼叫时收集，而不能提前手机。主要分为以下四种

- 主机候选地址：网卡上的实际地址。如果`ICE`代理在`NAT`后，则表示私有地址
- 服务器反射候选项：发送给 `STUN` 服务器检查请求，在响应中返回的地址。如果`ICE`代理位于`NAT`之后，表示最外层的`NAT`外部地址
- 对等反射候候选项：另一端`ICE`代理获取的 `STUN` 服务器反射地址
- 中继候选项：使用`TURN`协议获取，使用`TURN`分配请求获取的传输地址为中继候选项

> 注意

- 收集候选项这一步骤中使用的 `STUN` 和`TURN`服务器地址是通过 RTCConfiguration 对象的 iceServers 来配置的
- 仅使用 `STUN` 识别公共`IP`地址并不足以完成`NAT`遍历，需要完整的`ICE`功能才能确保`NAT`遍历完成

##### 3.3 交换媒体或数据
建立连接后，可将本地媒体流关联到对等连接，以通过该连接发送至远程浏览器。在更改媒体时，在两个端之间协商或者重新协商在连接通道中表示媒体。当从某一端发出添加或者删除媒体的请求，可以请求浏览器生成相应的 `RTCSessionDescription` 对象(存放有关如何连接媒体会话的信息)，表示对等连接所有媒体的集合。

> 注：在 `SDP` 发送到对端之前，本地可以根据需要查看和编辑。基于此设计，浏览器可以处理编解码器协商和编写会话描述协议`(Session Description Protocol, SDP)`

- 两个浏览器交换完 `RTCSessionDescription` 对象后，即可建立媒体或数据会话
- 两个浏览器开始打洞
- 打洞完毕协商密钥，确保媒体会话的安全
- 开始媒体或数据会话

> 注：以上所有动作，通过浏览器执行 `JS` 代码完成。包括添加和删除 `STUN` 和 `TURN`  服务器(用于`NAT`穿透和监控)

##### 3.4 关闭连接
在对等连接中，任何一端的浏览器都可以关闭连接。调用 `RTCPeerConnection` 的 `close` 操作会停止 `ICE` 处理和媒体流传输。如果某一端的浏览器断开连接或者发生崩溃，媒体或数据通道的持久连接将失效。另一端的浏览器将尝试重新打洞，并在打洞失败时关闭会话。

#### 四、WebRTC 常用的通信模型

`WebRTC` 常用的通信模型如下
##### 网状模型
￼不经过任何服务器节点，不做混流或者转发。在同等网络环境下，支持的多人通话路数就相对有限，视频质量和码率比较低，尤其是一对多的场景。
##### 混流或者转发模型
混流或转发模型借助于中央服务器节点，`WebRTC` 用户无须直接与其它客户端建立对等连接，而只须与服务器建立点对点连接。服务器在接收到客户端的音视频流之后负责转发给其它客户端，也可以将多个用户的音视频流做混合或者转码后再传输。甚至可以在服务器上做媒体流协议的转换，方便接入其它流媒体服务系统。总之，利用混流/转发架构，可以很容易地在服务器端做不同的定制化需求。

#### 五、常用的混流和转发方式

混流/转发架构中的服务器实现通常可分为 `MCU(Multipoint Control Unit)` 和 `SFU(Selective Forwarding Unit)` 两种
##### `MCU` 多点控制单元
`MCU`是传统视频会议系统中的核心控制单元，在 `WebRTC` 的系统实现中， 适合于多人音视频通话场景，`MCU` 可以对接收到的多路流进行转码和混合，输出为一路流，这样做的好处是节省终端用户的下行带宽，并且还能够对不同网络条件的用户，订制不同码率的输出视频流，让多人场景有更好的用户体验。当然，`MCU` 的能力不止于此，现在流行的 `MCU` 中，还可以对视频流进行视频分析，做人脸检测和前景识别等，实现比较炫酷的功能。
##### `SFU` 选择转发单元
相比于 `MCU`，`SFU` 的功能相对单一，它以最低的开销来转发各路媒体流，典型的应用场景是1对多的直播服务，`SFU` 从发布客户端复制音视频流的信息，然后分发到多个订阅客户端。目前在开源社区有免费的 `WebRTC` 服务器实现，比较著名的有 `Licode`、`Kurento` 和 `Mediasoup`，使用它们可以很方便的进行服务部署并且实现多人的音视频互通功能。

#### 六、引用链接
> 感谢以下源码、文章的作者大佬，感谢各位引路人

- [WebRTC](https://webrtc.org/)
- [WebRTC 权威指南](http://webrtcbook.com/)
- [mediasoup](https://mediasoup.org/)
- [Kurento](http://www.kurento.org/)
- [声网 Agora.io](https://www.agora.io/cn/)
- [ICE 原理学习](https://blog.csdn.net/u012377333/article/details/44463807)
- [WebRTC数据通道的5个用处](http://webrtc.org.cn/uses-of-datachannel/)
- [WebRTC 网页实时通信](https://www.jianshu.com/p/351b6d98f214)
- [使用WebRTC搭建前端视频聊天室——数据通道篇](https://segmentfault.com/a/1190000000733779)
- [网络地址转换](https://zh.wikipedia.org/zh-hans/%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2)
- [NAT路由器“打洞”技术，即P2P通信实现原理](https://blog.csdn.net/u010571316/article/details/41629983)
- [P2P打洞与转发](https://www.jianshu.com/p/b84ea91e1549)
- [基于 WebRTC 技术的实时通信服务开发实践](https://juejin.im/entry/5978018251882563080713d6)